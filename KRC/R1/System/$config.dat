&REL 43
DEFDAT  $CONFIG
;FOLD BAS GLOBALS;%{E}%V3.2.0,%MKUKATPBASIS,%CGLOBALS,%VGLOBALS,%P
;==================================
; Default parameters for movement
; These values shouldn't be changed
;==================================
; EDITOR-Modes
;----------------------------------
INT $EDIT_MODE=1
;----------------------------------
; general MOVEMENT - parameters:
;----------------------------------

INT DEF_OV_PRO=100
INT DEF_ADVANCE=3

; PTP - MOVEMENTS
;----------------------------------
INT DEF_VEL_PTP=100
INT DEF_ACC_PTP=50

; CP - MOVEMENTS                                                 
;----------------------------------
DECL CIRC_TYPE DEF_CIRC_TYP=#BASE
REAL DEF_VEL_CP=2.0
REAL DEF_VEL_ORI1=200.0
REAL DEF_VEL_ORI2=200.0
REAL DEF_ACC_CP=2.29999995
REAL DEF_ACC_ORI1=100.0
REAL DEF_ACC_ORI2=100.0
REAL DEF_VEL_FACT=1.0

; APO - parameters
;--------------------------------
INT DEF_APO_CPTP=50
INT DEF_APO_CVEL=100
REAL DEF_APO_CDIS=3.0
REAL DEF_APO_CORI=5.0

;==================================
; Structures:
;==================================
ENUM BAS_COMMAND INITMOV,ACC_CP,ACC_PTP,VEL_CP,VEL_PTP,ACC_GLUE,TOOL,BASE,EX_BASE,PTP_DAT,CP_DAT,OUT_SYNC,OUT_ASYNC,GROUP,FRAMES
ENUM OUT_MODETYPE TRIGGER_,CONT_,STOP_
ENUM IPO_M_T NONE,TCP,BASE
STRUC DIG_OUT_TYPE INT FIRST_BIT,LENGTH,PARITY,CODING
STRUC CTRL_IN_T INT IN_NR,CHAR NAME_NAT[20]
STRUC CTRL_OUT_T INT OUT_NR,BOOL INI,CHAR NAME_NAT[20]
STRUC FCT_OUT_T INT NO,REAL PULS_TIME,BOOL STATE
STRUC FCT_IN_T INT NO,BOOL STATE
STRUC EX_AX_DATA_T FRAME ROOT,ESYS EX_KIN,FRAME OFFSET
STRUC PDAT REAL VEL,ACC,APO_DIST
STRUC LDAT REAL VEL,ACC,APO_DIST,APO_FAC
STRUC FDAT INT TOOL_NO,BASE_NO,IPO_MODE IPO_FRAME
STRUC ODAT INT OUT_NO,BOOL STATE,REAL PULSE_TIME,OUT_MODETYPE OUT_MODE,REAL TIME_DELAY,OFFSET
STRUC BASIS_SUGG_T CHAR POINT1[24],POINT2[24],CP_PARAMS[24],PTP_PARAMS[24],CONT[24],CP_VEL[24],PTP_VEL[24]
STRUC OUT_SUGG_T CHAR PARAMS[24]

;==================================
; External declarations:
;==================================
EXT  BAS (BAS_COMMAND  :IN,REAL  :IN )
EXT  IR_STOPM ( )

;====================
; Signal declarations
; Do not change !!!!!
;====================
SIGNAL CHANNEL_1 $ANOUT[1]
SIGNAL CHANNEL_2 $ANOUT[2]
SIGNAL CHANNEL_3 $ANOUT[3]
SIGNAL CHANNEL_4 $ANOUT[4]
SIGNAL CHANNEL_5 $ANOUT[5]
SIGNAL CHANNEL_6 $ANOUT[6]
SIGNAL CHANNEL_7 $ANOUT[7]
SIGNAL CHANNEL_8 $ANOUT[8]
SIGNAL CHANNEL_9 $ANOUT[9]
SIGNAL CHANNEL_10 $ANOUT[10]
SIGNAL CHANNEL_11 $ANOUT[11]
SIGNAL CHANNEL_12 $ANOUT[12]
SIGNAL CHANNEL_13 $ANOUT[13]
SIGNAL CHANNEL_14 $ANOUT[14]
SIGNAL CHANNEL_15 $ANOUT[15]
SIGNAL CHANNEL_16 $ANOUT[16]
SIGNAL CHANNEL_17 $ANOUT[17]
SIGNAL CHANNEL_18 $ANOUT[18]
SIGNAL CHANNEL_19 $ANOUT[19]
SIGNAL CHANNEL_20 $ANOUT[20]
SIGNAL CHANNEL_21 $ANOUT[21]
SIGNAL CHANNEL_22 $ANOUT[22]
SIGNAL CHANNEL_23 $ANOUT[23]
SIGNAL CHANNEL_24 $ANOUT[24]
SIGNAL CHANNEL_25 $ANOUT[25]
SIGNAL CHANNEL_26 $ANOUT[26]
SIGNAL CHANNEL_27 $ANOUT[27]
SIGNAL CHANNEL_28 $ANOUT[28]
SIGNAL CHANNEL_29 $ANOUT[29]
SIGNAL CHANNEL_30 $ANOUT[30]
SIGNAL CHANNEL_31 $ANOUT[31]
SIGNAL CHANNEL_32 $ANOUT[32]

;==================================
; Variables:
;==================================
DECL PDAT PDEFAULT={VEL 100.0,ACC 100.0,APO_DIST 100.0}
DECL LDAT LDEFAULT={VEL 2.0,ACC 100.0,APO_DIST 100.0,APO_FAC 50.0}
DECL FDAT FDEFAULT={TOOL_NO 1,BASE_NO 0,IPO_FRAME #BASE}
DECL FDAT FHOME={TOOL_NO 1,BASE_NO 0,IPO_FRAME #BASE}
DECL ODAT ODEFAULT={OUT_NO 1,STATE TRUE,PULSE_TIME 0.0,OUT_MODE #STOP_,TIME_DELAY 0.0,OFFSET 0.0}

DECL PDAT PDAT_ACT
DECL LDAT LDAT_ACT
DECL FDAT FDAT_ACT
DECL ODAT ODAT_ACT
DECL INT ACT_DELAY
DECL INT ACT_DISTANCE

;GROUP-Definitions
;----------------------------------
INT COMPL_GROUP='B0001'

INT DEF_GROUP[10]
DEF_GROUP[1]='B1111' ; complete
DEF_GROUP[2]='B0001' ; robot only
DEF_GROUP[3]='B0011' ; robot and track
DEF_GROUP[4]='B0111' ; robot, track and ext. axis2
DEF_GROUP[5]='B1011' ; robot, track and ext. axis3
DEF_GROUP[6]='B1111' ; robot, track and ext. axis2+3
DEF_GROUP[7]='B1111' ; complete
DEF_GROUP[8]='B1111' ; complete
DEF_GROUP[9]='B1111' ; complete
DEF_GROUP[10]='B1111' ; complete

INT $ACT_GROUP='B0001'

; HOME POSITION
;----------------------------------
E6AXIS XHOME={a1 -74.4936371,a2 -107.645103,a3 47.2527313,a4 -2.03133512,a5 -20.0877209,a6 -177.484802,e1 0.0,e2 0.0,e3 0.0,e4 0.0,e5 0.0,e6 0.0}
E6AXIS XHOME1={a1 0.0,a2 -90.0,a3 90.0,a4 0.0,a5 0.0,a6 0.0,e1 0.0,e2 0.0,e3 0.0,e4 0.0,e5 0.0,e6 0.0}
E6AXIS XHOME2={a1 0.0,a2 -90.0,a3 90.0,a4 0.0,a5 0.0,a6 0.0,e1 0.0,e2 0.0,e3 0.0,e4 0.0,e5 0.0,e6 0.0}
E6AXIS XHOME3={a1 0.0,a2 -90.0,a3 90.0,a4 0.0,a5 0.0,a6 0.0,e1 0.0,e2 0.0,e3 0.0,e4 0.0,e5 0.0,e6 0.0}
E6AXIS XHOME4={a1 0.0,a2 -90.0,a3 90.0,a4 0.0,a5 0.0,a6 0.0,e1 0.0,e2 0.0,e3 0.0,e4 0.0,e5 0.0,e6 0.0}
E6AXIS XHOME5={a1 0.0,a2 -90.0,a3 90.0,a4 0.0,a5 0.0,a6 0.0,e1 0.0,e2 0.0,e3 0.0,e4 0.0,e5 0.0,e6 0.0}
E6AXIS XHOME6={a1 0.0,a2 -90.0,a3 90.0,a4 0.0,a5 0.0,a6 0.0,e1 0.0,e2 0.0,e3 0.0,e4 0.0,e5 0.0,e6 0.0}

; REFERENCE POINTS
;----------------------------------
DECL FRAME REF_PT[16]
REF_PT[1]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[2]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[3]={x -564.41217,y 1277.96948,z 778.508179,a 110.665543,b -71.8364487,c -178.66713}
REF_PT[4]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[5]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[6]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[7]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[8]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[9]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[10]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[12]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[13]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[14]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[15]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
REF_PT[16]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}

FRAME REF_TOOL={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}

; TOOL and BASE data
;----------------------------------
BOOL AUTO_IPO_M=FALSE
BOOL STOPM_FLAG=FALSE
BOOL TOOL_CORR_ON=FALSE
BOOL BASE_CORR_ON=FALSE
FRAME TOOL_CORR={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
FRAME BASE_CORR={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
INT COR_TOOL_NO=0

INT MAX_TOOL=16
DECL FRAME TOOL_DATA[16]
TOOL_DATA[1]={x -530.0,y 0.0,z 540.0,a 0.0,b -45.0,c 0.0}
TOOL_DATA[2]={x 530.0,y 0.0,z 540.0,a 0.0,b 45.0,c 0.0}
TOOL_DATA[3]={x -569.003906,y 13.8781891,z 541.274841,a 0.0,b 0.0,c 0.0}
TOOL_DATA[4]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[5]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[6]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[7]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[8]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[9]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[10]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[11]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[12]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[13]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[14]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[15]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
TOOL_DATA[16]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}

DECL CHAR TOOL_NAME[16,24]
TOOL_NAME[1,]="Tool1     "
TOOL_NAME[2,]="Tool2     "
TOOL_NAME[3,]=" "
TOOL_NAME[4,]=" "
TOOL_NAME[5,]=" "
TOOL_NAME[6,]=" "
TOOL_NAME[7,]=" "
TOOL_NAME[8,]=" "
TOOL_NAME[9,]=" "
TOOL_NAME[10,]=" "
TOOL_NAME[11,]=" "
TOOL_NAME[12,]=" "
TOOL_NAME[13,]=" "
TOOL_NAME[14,]=" "
TOOL_NAME[15,]=" "
TOOL_NAME[16,]=" "

DECL LOAD LOAD_DATA[16]
LOAD_DATA[1]={M 64.3799973,CM {x 2.60610104,y 3.02784204,z 210.153107,a 127.833801,b -87.5761337,c 150.067902},J {X 2.0,Y 4.94999981,Z 12.7132597}}
LOAD_DATA[2]={M 77.6500015,CM {x 2.20351005,y 4.3668642,z 264.615387,a -139.634796,b -89.3714905,c -124.592201},J {X 5.63362122,Y 10.7772598,Z 18.2507095}}
LOAD_DATA[3]={M 135.0,CM {x 230.0,y 0.0,z 210.0,a 0.0,b 0.0,c 0.0},J {X 40.0,Y 40.0,Z 40.0}}
LOAD_DATA[4]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[5]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[6]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[7]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[8]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[9]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[10]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[11]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[12]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[13]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[14]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[15]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
LOAD_DATA[16]={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}

DECL IPO_M_T TOOL_TYPE[16]
TOOL_TYPE[1]=#BASE
TOOL_TYPE[2]=#BASE
TOOL_TYPE[3]=#BASE
TOOL_TYPE[4]=#NONE
TOOL_TYPE[5]=#NONE
TOOL_TYPE[6]=#NONE
TOOL_TYPE[7]=#NONE
TOOL_TYPE[8]=#NONE
TOOL_TYPE[9]=#NONE
TOOL_TYPE[10]=#NONE
TOOL_TYPE[11]=#NONE
TOOL_TYPE[12]=#NONE
TOOL_TYPE[13]=#NONE
TOOL_TYPE[14]=#NONE
TOOL_TYPE[15]=#NONE
TOOL_TYPE[16]=#NONE

DECL LOAD LOAD_A1_DATA={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
DECL LOAD LOAD_A2_DATA={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}
DECL LOAD LOAD_A3_DATA={M -1.0,CM {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},J {X 0.0,Y 0.0,Z 0.0}}

INT MAX_BASE=16
DECL FRAME BASE_DATA[16]
BASE_DATA[1]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[2]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[3]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[4]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[5]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[6]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[7]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[8]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[9]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[10]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[11]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[12]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[13]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[14]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[15]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}
BASE_DATA[16]={x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}

DECL CHAR BASE_NAME[16,24]
BASE_NAME[1,]=" "
BASE_NAME[2,]=" "
BASE_NAME[3,]=" "
BASE_NAME[4,]=" "
BASE_NAME[5,]=" "
BASE_NAME[6,]=" "
BASE_NAME[7,]=" "
BASE_NAME[8,]=" "
BASE_NAME[9,]=" "
BASE_NAME[10,]=" "
BASE_NAME[11,]=" "
BASE_NAME[12,]=" "
BASE_NAME[13,]=" "
BASE_NAME[14,]=" "
BASE_NAME[15,]=" "
BASE_NAME[16,]=" "

DECL IPO_M_T BASE_TYPE[16]
BASE_TYPE[1]=#NONE
BASE_TYPE[2]=#NONE
BASE_TYPE[3]=#NONE
BASE_TYPE[4]=#NONE
BASE_TYPE[5]=#NONE
BASE_TYPE[6]=#NONE
BASE_TYPE[7]=#NONE
BASE_TYPE[8]=#NONE
BASE_TYPE[9]=#NONE
BASE_TYPE[10]=#NONE
BASE_TYPE[11]=#NONE
BASE_TYPE[12]=#NONE
BASE_TYPE[13]=#NONE
BASE_TYPE[14]=#NONE
BASE_TYPE[15]=#NONE
BASE_TYPE[16]=#NONE

;External AXIS data
;----------------------------------
INT MAX_EX_BASE=6
DECL EX_AX_DATA_T EX_AX_DATA[6]
EX_AX_DATA[1]={ROOT {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},EX_KIN #EASYS,OFFSET {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}}
EX_AX_DATA[2]={ROOT {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},EX_KIN #EBSYS,OFFSET {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}}
EX_AX_DATA[3]={ROOT {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},EX_KIN #ECSYS,OFFSET {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}}
EX_AX_DATA[4]={ROOT {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},EX_KIN #EDSYS,OFFSET {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}}
EX_AX_DATA[5]={ROOT {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},EX_KIN #EESYS,OFFSET {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}}
EX_AX_DATA[6]={ROOT {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0},EX_KIN #EFSYS,OFFSET {x 0.0,y 0.0,z 0.0,a 0.0,b 0.0,c 0.0}}

DECL CHAR EX_AX_NAME[6,24]
EX_AX_NAME[1,]=" "
EX_AX_NAME[2,]=" "
EX_AX_NAME[3,]=" "
EX_AX_NAME[4,]=" "
EX_AX_NAME[5,]=" "
EX_AX_NAME[6,]=" "

DECL IPO_M_T EX_AX_TYPE[6]
EX_AX_TYPE[1]=#NONE
EX_AX_TYPE[2]=#NONE
EX_AX_TYPE[3]=#NONE
EX_AX_TYPE[4]=#NONE
EX_AX_TYPE[5]=#NONE
EX_AX_TYPE[6]=#NONE

;******************************************
; Variables for axis CALIBRATING
;******************************************
DECL INT CAL_AXIS
BOOL CONST_SPEED

;******************************************
; all for InterBus Mapping on optional segments
;******************************************

DECL INT IBUS_SEGMENT[16]
IBUS_SEGMENT[1]=0
IBUS_SEGMENT[2]=0
IBUS_SEGMENT[3]=0
IBUS_SEGMENT[4]=0
IBUS_SEGMENT[5]=0
IBUS_SEGMENT[6]=0
IBUS_SEGMENT[7]=0
IBUS_SEGMENT[8]=0
IBUS_SEGMENT[9]=0
IBUS_SEGMENT[10]=0
IBUS_SEGMENT[11]=0
IBUS_SEGMENT[12]=0
IBUS_SEGMENT[13]=0
IBUS_SEGMENT[14]=0
IBUS_SEGMENT[15]=0
IBUS_SEGMENT[16]=0
;ENDFOLD
;FOLD AUTOEXT GLOBALS;%{E}%V3.2.0,%MKUKATPBASIS,%CGLOBALS,%VAUTOEXT,%P
;==================================
; Structures:
;==================================
ENUM FUNCT_TYPE PGNO_GET,PGNO_ACKN,PGNO_FAULT
ENUM P00_COMMAND INIT_EXT,EXT_PGNO,CHK_HOME,EXT_ERR

STRUC SPS_PROG_TYPE INT PROG_NR,CHAR PROG_NAME[12]
;==================================
; External declarations:
;==================================
EXT  P00 (P00_COMMAND  :IN,FUNCT_TYPE  :IN,CHAR [],INT  :IN )
;External declaration  for  Submit controlled AutoExt
EXT  P00_SUBM (P00_COMMAND  :IN,FUNCT_TYPE  :IN )

;==================================
; Variables:
;==================================
; Variables for internal
; Communication:
;----------------------------------
BOOL ERROR_FLAG
BOOL CHECK_HOME=TRUE
BOOL PROG_CONTROL=FALSE
DECL CHAR PRO_NAME1_L[8]
PRO_NAME1_L[]="        "
DECL CHAR PRO_NAME1_A[8]
PRO_NAME1_A[]="        "

INT PGNO=3 ;copy of ext. pgno
INT PGNO_ERROR=0 ;transmission error
INT PGNO_TYPE=1 ;coding type of ext. pgno
INT REFLECT_PROG_NR=0 ; enable mirroring of program number inputs (1=enabled, 0=disabled)

; Variables for External 
; Communication: I/O-Interface
;----------------------------------
INT PGNO_FBIT=49 ;first bit of ext. pgno input $IN[]
INT PGNO_FBIT_REFL=999 ;first bit of ext. pgno reflection output $OUT[]
INT PGNO_LENGTH=8 ;length of ext. pgno (max. 16)
INT PGNO_PARITY=44 ;parity bit of ext. pgno
INT PGNO_REQ=33 ;request ext. pgno input
INT PGNO_VALID=45 ;validate ext. pgno input
INT APPL_RUN=34 ;application program is running output
INT ERR_TO_PLC=35 ;error output to PLC
INT P01_STEP
INT CHK_STEP
INT PGNO_FLAG

; Table for assign SPS program number to program name
INT MAX_SPS_PROG=12
DECL SPS_PROG_TYPE SPS_PROG[12]
SPS_PROG[1]={PROG_NR 1,PROG_NAME[] "HP01()    "}
SPS_PROG[2]={PROG_NR 2,PROG_NAME[] "HP02()    "}
SPS_PROG[3]={PROG_NR 3,PROG_NAME[] "HP03()    "}
SPS_PROG[4]={PROG_NR 4,PROG_NAME[] "HP04()    "}
SPS_PROG[5]={PROG_NR 5,PROG_NAME[] "HP05()    "}
SPS_PROG[6]={PROG_NR 6,PROG_NAME[] "HP06()    "}
SPS_PROG[7]={PROG_NR 7,PROG_NAME[] "HP07()    "}
SPS_PROG[8]={PROG_NR 8,PROG_NAME[] "HP08()    "}
SPS_PROG[9]={PROG_NR 9,PROG_NAME[] "HP09()    "}
SPS_PROG[10]={PROG_NR 10,PROG_NAME[] "HP10()    "}
SPS_PROG[11]={PROG_NR 62,PROG_NAME[] "HP62()    "}
SPS_PROG[12]={PROG_NR 63,PROG_NAME[] "HP63()    "}
DECL CHAR TMPNAME[128]
TMPNAME[]="                                "

;ENDFOLD
;FOLD GRIPPER GLOBALS;%{E}%V3.2.0,%MKUKATPGRP,%CGLOBALS,%VGLOBALS,%P
;==================================
; Structures:
;==================================
ENUM ON_OFF_TYP ON,OFF,MID
ENUM APO_TYP YES,NO

STRUC GRP_TYP APO_TYP G_APO,REAL TIME,ON_OFF_TYP CTRL,INT DLY,INT DST
; structure for gripper definition
STRUC GRP_TYPES INT TYPE,OUT1,OUT2,OUT3,OUT4,IN1,IN2,IN3,IN4,GRP_OLD
; structure for last values
STRUC GRP_SUGG_T CHAR NUMBER[24],STATE[24],PARAMS[24]

;==================================
; External declarations:
;==================================
EXT  H50 (INT  :IN,INT  :IN,INT  :IN,GRP_TYP  :IN )
EXT  USER_GRP (INT  :IN,INT  :IN,INT  :IN,GRP_TYP  :IN )
;==================================
; Variables:
;==================================
; instruction codes
INT GRP=1
INT CHK_APO=2
INT GRP_APO=3
INT CHK_APO_UP=4

;==================================
; Variables:
;==================================
DECL GRP_TYP GDEFAULT={G_APO #NO,TIME 0.200000003,CTRL #OFF,DLY 0,DST 1}
INT DUMMY=0

;constant for time out in sec
REAL TIME_OUT=3.0
INT CHK_CODE=0
BOOL APO_CHK_ON=FALSE
BOOL H50_FERTIG=TRUE

;==================================
; Options:
;==================================
BOOL APO_CHK_OPT=TRUE

;==================================
; Definition of grippers
;==================================
INT MAXGRIPPER=16

DECL GRP_TYPES GRIPPER[16]

GRIPPER[1]={TYPE 1,OUT1 13,OUT2 14,OUT3 999,OUT4 999,IN1 21,IN2 22,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[2]={TYPE 1,OUT1 15,OUT2 16,OUT3 999,OUT4 999,IN1 23,IN2 24,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[3]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[4]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[5]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[6]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[7]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[8]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[9]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[10]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[11]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[12]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[13]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[14]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[15]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}
GRIPPER[16]={TYPE 0,OUT1 999,OUT2 999,OUT3 999,OUT4 999,IN1 0,IN2 0,IN3 0,IN4 0,GRP_OLD 1}

REAL GRP_PULSE_TI=0.5 ; pulse time for gripper type 5
;ENDFOLD

;FOLD USER GLOBALS;%E{O},%P___$$$___CONFIG.USB___start___
;==================================
; Userdefined Types 
;==================================



;==================================
; Userdefined Externals 
;==================================

;==================================
; Userdefined Variables 
;==================================

BOOL bMarchaCintaSuperior=FALSE
BOOL bCintaSupGirando=FALSE
BOOL bPulsoCintaSup=FALSE
BOOL bRobotEnCintaSup=TRUE
BOOL DESCARGACNC1=FALSE
BOOL DESCARGACNC2=FALSE

BOOL bParadaManiobra=FALSE

REAL nTiempoCintaSup=20.0
INT ANSWER=0
INT nVeloMaq=100
INT npieza=0
INT Longitud_pieza=780
INT nVeloFuera=30
INT nContadorPiezas=645665
INT offset=50
INT nivel=1
INT ndiametro=60
INT entrepieza=1
INT piezas_fila=8
REAL suma_x
REAL suma_z
;==================================
; Userdefined SIGNALS 
;==================================

SIGNAL InMarchaCinta $IN[1]
;SIGNAL InReserva $IN[2] 
SIGNAL InFinCiclo $IN[3]
SIGNAL InPulsadorMarcha $IN[4]
SIGNAL InPulsadorParo $IN[5]
SIGNAL InSelecManual $IN[6]
SIGNAL InSelecAuto $IN[7]
SIGNAL InBorradoMsg $IN[8]
SIGNAL InTermicoCinta $IN[9]
SIGNAL InContrpuntoAdelanteCNC $IN[10]
SIGNAL InDetParadaCinta $IN[11]
SIGNAL InPresPiezaCinta $IN[12]
SIGNAL InContrpuntoAtrasCNC $IN[13]
SIGNAL InPlatoAbiertoCNC $IN[14]
SIGNAL InPlatoCerradoCNC $IN[15]
SIGNAL InLunetaAbiertaCNC $IN[16]
SIGNAL InLunetaCerradaCNC $IN[17]
SIGNAL InPermRobCargaCNC $IN[18]
SIGNAL InNoAlarmasCNC $IN[19]
SIGNAL InAire $IN[20]
SIGNAL InPinza1Abierta $IN[21]
;SIGNAL InReserva $IN[22]
SIGNAL InPinza2Abierta $IN[23]
;SIGNAL InReserva $IN[24]
SIGNAL InConRobotCNC $IN[25]
SIGNAL InPuertaAbiertaCNC $IN[26]



SIGNAL OutMarchaCinta $OUT[1]
SIGNAL OutMarchaCNC $OUT[2]
SIGNAL OutRobotDentroCNC $OUT[3]
SIGNAL OutPilotoAlarma $OUT[4]
SIGNAL OutPilotoParo $OUT[5]
SIGNAL OutPilotoMarcha $OUT[6]
SIGNAL OutRobotFueraCNC $OUT[7]
SIGNAL OutAbrirPlatoCNC $OUT[8]
SIGNAL OutCerrarPlatoCNC $OUT[9]
SIGNAL OutAvanContrpuntoCNC $OUT[10]
SIGNAL OutRetroContrpuntoCNC $OUT[11]
SIGNAL OutAbrirLunetaCNC $OUT[12]
SIGNAL OutAbrirPinza1 $OUT[13]
SIGNAL OutCerrarPinza1 $OUT[14]
SIGNAL OutAbrirPinza2 $OUT[15]
SIGNAL OutCerrarPinza2 $OUT[16]
SIGNAL OutCerrarLunetaCNC $OUT[17]
SIGNAL OutMarchaCNC2 $OUT[65]
SIGNAL OutRobotDentroCNC2 $out[66]
SIGNAL OutAbrirPlatoCNC2 $out[68]
SIGNAL OutCerrarPlatoCNC2 $out[69]
SIGNAL OutAvanceCPCNC2 $out[70]
SIGNAL OutRetrocesoCPCNC2 $out[71]
SIGNAL OutAbrirLunetaCNC2 $out[72]
SIGNAL OutCerrarLunetaCNC2 $out[73]
SIGNAL RobotDentroCinta $out[87]


;ENDFOLD;___$$$___CONFIG.USB___end_____
ENDDAT
